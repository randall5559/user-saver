{"version":3,"sources":["modules/users/constants.js","modules/users/reducers/index.js","modules/message/constants.js","modules/message/reducers/index.js","modules/reducers/index.js","modules/store/configureStore.js","components/Header/Header.js","components/SearchBar/SearchBar.js","components/UserTable/UserTableRow.js","components/UserTable/UserTable.js","components/MessageBar/MessageBar.js","apis/constants.js","apis/firebase.js","apis/users.js","modules/message/actions/showHideMessageBox.js","modules/users/actions/fetchUsers.js","modules/users/actions/fetchUser.js","modules/users/actions/removeUser.js","modules/users/actions/index.js","modules/message/actions/index.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["constants","ADD_USER","FETCH_USER_INFO","FETCH_USERS","FETCH_USERS_FAILURE","FETCH_USERS_SUCCESS","FETCH_USERS_REQUEST","REMOVE_USER","REMOVE_USER_SUCCESS","REMOVE_USER_FAILURE","users","state","arguments","length","undefined","initialState","_ref","type","payload","actionTypes","Object","keys","map","key","id","objectSpread","url","html_url","username","login","name","publicRepos","public_repos","publicGists","public_gists","followers","following","createdAt","created_at","userInfoState","slice","push","Date","toDateString","filter","obj","SHOW_MESSAGE","HIDE_MESSAGE","message","display","rootReducer","combineReducers","store","createStore","defaultInitialState","applyMiddleware","thunk","withStyles","header","marginBottom","classes","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","theme","paper","padding","spacing","unit","margin","justifyContent","textfield","width","_ref$classes","fetchUser","doQuery","Paper_default","TextField_default","label","placeholder","InputLabelProps","shrink","onKeyPress","_ref2","value","target","CustomTableCell","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","flexGrow","table","minWidth","row","&:nth-of-type(odd)","background","default","removeUser","Table_default","TableHead_default","TableRow_default","UserTableRow","align","TableBody_default","user","IconButton_default","href","aria-label","Launch_default","component","scope","onClick","Delete_default","MessageBar","open","onClose","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","aria-describedby","action","Close_default","URLS","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","usersAPIs","fetch","concat","then","response","json","error","Error","fetchUsers","ref","once","userToRemove","child","remove","addUser","newUser","err","showMessage","createAction","hideMessage","fetchUsersSuccess","fetchUsersFailure","dispatch","apis","snapshot","val","catch","fetchUserInfoSuccess","fetchUserFailure","userInfo","removeUserSuccess","removeUserFailure","actions","message_actions","App","handleClose","event","reason","_this","props","messageActions","this","usersActions","_this$props","_this$props$message","_this$props$usersActi","usersData","root","components_Header_Header","components_MessageBar_MessageBar","Grid_default","container","direction","justify","alignItems","grid","item","xs","components_SearchBar_SearchBar","components_UserTable_UserTable","Component","connect","bindActionCreators","marginTop","Boolean","window","location","hostname","match","render","es","configureStore","containers_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99f589b6.chunk.js","sourcesContent":["const constants = {\n    ADD_USER: 'ADD_USER',\n    FETCH_USER_INFO: 'FETCH_USER_INFO',\n    FETCH_USERS: 'FETCUSERS',\n    FETCH_USERS_FAILURE: 'FETCH_USERS_FAILURE',\n    FETCH_USERS_SUCCESS: 'FETCH_USERS_SUCCESS',\n    FETCH_USERS_REQUEST: 'FETCH_USERS_REQUEST',\n    REMOVE_USER: 'REMOVE_USER',\n    REMOVE_USER_SUCCESS: 'REMOVE_USER_SUCCESS',\n    REMOVE_USER_FAILURE: 'REMOVE_USER_FAILURE',\n};\n\nexport default constants;\n","import initialState from '../../store/initialState.json';\nimport actionTypes from '../constants';\n\nconst users = (state = initialState.users, { type, payload }) => {\n    switch (type) {\n        case actionTypes.FETCH_USERS_FAILURE:\n        case actionTypes.REMOVE_USER_FAILURE:\n            return state;\n\n        case actionTypes.FETCH_USERS_SUCCESS:\n            const usersState = Object.keys(payload).map((key, id) => ({ key, id, ...payload[key] }));\n            return usersState;\n\n        case actionTypes.FETCH_USER_INFO:\n            const {\n                html_url: url,\n                login: username,\n                name,\n                public_repos: publicRepos,\n                public_gists: publicGists,\n                followers, following,\n                created_at: createdAt\n            } = payload;\n\n            const userInfoState = state.slice(0);\n\n            userInfoState.push({\n                url,\n                username,\n                name,\n                publicRepos,\n                publicGists,\n                followers,\n                following,\n                createdAt: new Date(createdAt).toDateString(),\n                id: (state.length + 1) });\n\n            return userInfoState;\n\n        case actionTypes.REMOVE_USER_SUCCESS:\n            const { key } = payload;\n            const removeState = state.slice(0);\n            return removeState.filter(obj => obj.key !== key);\n\n        default:\n            return state;\n    }\n}\n\nexport default users\n","const constants = {\n    SHOW_MESSAGE: 'SHOW_MESSAGE',\n    HIDE_MESSAGE: 'HIDE_MESSAGE',\n};\n\nexport default constants;","import initialState from '../../store/initialState.json';\nimport actionTypes from '../constants';\n\nconst users = (state = initialState.message, { type, payload }) => {\n    switch (type) {\n        case actionTypes.SHOW_MESSAGE:\n            return {\n                display: true,\n                message: payload,\n            };\n        case actionTypes.HIDE_MESSAGE:\n            return { ...state, display: false };\n        default:\n            return state;\n    }\n}\n\nexport default users\n","import { combineReducers } from 'redux';\nimport users from '../users/reducers';\nimport message from '../message/reducers';\n\nconst rootReducer = combineReducers({\n    users,\n    message\n});\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nimport defaultInitialState from './initialState';\n\nconst store = () => createStore(\n    rootReducer,\n    defaultInitialState,\n    applyMiddleware(thunk)\n);\n\nexport default store;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core';\n\nconst styles = () => ({\n    header: {\n        marginBottom: 10,\n    },\n});\n\nconst Header = ({classes: { header }}) => (\n    <div className={header}>\n        <AppBar position=\"static\" color=\"default\">\n            <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n                Github User Saver\n            </Typography>\n            </Toolbar>\n        </AppBar>\n    </div>\n);\n\nexport default withStyles(styles)(Header);\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core';\n\nconst styles = theme => ({\n    paper: {\n        padding: theme.spacing.unit * 2,\n        margin: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    textfield: {\n        margin: '10px',\n        width: '95%',\n    },\n});\n\n/**\n * SearchBar Component - allows user to enter/trigger a call to retrieve a Github user's information\n *\n * @param {*} { classes: { paper, textfield }, fetchUser }\n */\nexport const SearchBar = ({ classes: { paper, textfield }, fetchUser, doQuery }) => (\n    <Paper className={paper}>\n        <TextField\n          id=\"outline_textfield_fullwidth\"\n          label=\"Add a Github User\"\n          className={textfield}\n          placeholder=\"Enter a Github Username\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          onKeyPress={({ key, target: { value }}) => {\n            if (key === 'Enter') {\n                fetchUser(value);\n            } \n          }}\n        />\n    </Paper>\n);\n\nexport default withStyles(styles)(SearchBar);","import TableCell from '@material-ui/core/TableCell';\nimport { withStyles } from '@material-ui/core';\n\nconst CustomTableCell = withStyles(theme => ({\n    head: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n}))(TableCell);\n\nexport default CustomTableCell;","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { withStyles } from '@material-ui/core';\n\nimport CustomTableCell from './UserTableRow';\n\nconst styles = (theme) => ({\n    paper: {\n        flexGrow: 1,\n    },\n    table: {\n        minWidth: 700,\n    },\n    row: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n    margin: {\n        margin: theme.spacing.unit,\n    },\n});\n\n/**\n * UserTable Component - displays all saved Github users\n *\n * @param {*} { classes: { paper, table, row, margin }, users, removeUser }\n */\nconst UserTable = ({ classes: { paper, table, row, margin }, users, removeUser }) => (\n    <Paper className={paper}>\n        <Table className={table}>\n        <TableHead>\n            <TableRow>\n                <CustomTableCell></CustomTableCell>\n                <CustomTableCell>Username</CustomTableCell>\n                <CustomTableCell align=\"left\">Name</CustomTableCell>\n                <CustomTableCell align=\"left\">Public Repos</CustomTableCell>\n                <CustomTableCell align=\"left\">Public Gists</CustomTableCell>\n                <CustomTableCell align=\"left\">Followers</CustomTableCell>\n                <CustomTableCell align=\"left\">Following</CustomTableCell>\n                <CustomTableCell align=\"left\">Created At</CustomTableCell>\n                <CustomTableCell></CustomTableCell>\n            </TableRow>\n        </TableHead>\n        <TableBody>\n            {users.map(user => (\n                <TableRow className={row} key={user.id}>\n                    <CustomTableCell>\n                        <IconButton\n                            target=\"_blank\"\n                            href={user.url}\n                            aria-label=\"Launch\"\n                            className={margin}\n                        >\n                            <LaunchIcon fontSize=\"small\" />\n                        </IconButton>\n                    </CustomTableCell>\n                    <CustomTableCell component=\"th\" scope=\"row\">\n                        {user.username}\n                    </CustomTableCell>\n                    <CustomTableCell align=\"left\">{user.name}</CustomTableCell>\n                    <CustomTableCell align=\"left\">{user.publicRepos}</CustomTableCell>\n                    <CustomTableCell align=\"left\">{user.publicGists}</CustomTableCell>\n                    <CustomTableCell align=\"left\">{user.followers}</CustomTableCell>\n                    <CustomTableCell align=\"left\">{user.following}</CustomTableCell>\n                    <CustomTableCell align=\"left\">{user.createdAt}</CustomTableCell>\n                    <CustomTableCell>\n                        <IconButton\n                            aria-label=\"Delete\"\n                            className={margin}\n                            onClick={() => {\n                                removeUser(user.key);\n                            }}\n                        >\n                            <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                    </CustomTableCell>\n                </TableRow>\n            ))}\n        </TableBody>\n        </Table>\n    </Paper>\n);\n\nexport default withStyles(styles)(UserTable);","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\n\n/**\n * MessageBar Component - display warnings, errors, etc. for fail requests\n *\n * @param {*} { open, onClose, message }\n * @returns\n */\nconst MessageBar = ({ open, onClose, message }) => {\n    return <Snackbar\n        anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={onClose}\n        ContentProps={{\n        'aria-describedby': 'message-id',\n        }}\n        message={<span id=\"message-id\" >{message}</span>}\n        action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"inherit\"\n              onClick={onClose}\n            >\n              <CloseIcon />\n            </IconButton>,\n        ]}\n    />\n}\n\nexport default MessageBar;","export const URLS = {\n    BASE_URL: 'https://api.github.com',\n    USERS: '/users'\n}\n\nexport const FIREBASE_CONFIG = {\n    apiKey: 'AIzaSyC9VPxTH__us-2R3yV-Xj18qLypU2_VUy0',\n    authDomain: 'user-saver-65233.firebaseapp.com',\n    databaseURL: 'https://user-saver-65233.firebaseio.com',\n    projectId: 'user-saver-65233',\n    storageBucket: 'user-saver-65233.appspot.com',\n    messagingSenderId: '90801367826'\n}","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport { FIREBASE_CONFIG } from './constants';\n\n// Initialize Firebase\nfirebase.initializeApp(FIREBASE_CONFIG);\n\n// Get a reference to the database service\nconst database = firebase.database();\n\nexport default database;\n","import database from './firebase';\nimport { URLS } from './constants';\n\n// Add a Github user to firebase\nconst addUser = (newUser, err) => database.ref('users').push(newUser, err);\n\n// REmove a Github user from firebase\nconst removeUser = userToRemove => database.ref('users').child(userToRemove).remove();\n\n// Retrieve all saved Github users info from firebase\nconst fetchUsers = () => database.ref('users').once('value');\n\n// Retrieve a user's Github info\nconst fetchUser = (username) => fetch(`${URLS.BASE_URL}${URLS.USERS}/${username}`)\n    .then(response => {\n        if (!response) {\n            return response.json().then(error => new Error(error.message));\n        }\n\n        return response.json();\n    });\n\nconst usersAPIs = {\n    fetchUser,\n    fetchUsers,\n    removeUser,\n    addUser\n}\n\nexport default usersAPIs;\n","import { createAction } from 'redux-actions';\n\nimport actionTypes from '../constants';\n\n// Actions\nexport const showMessage = createAction(actionTypes.SHOW_MESSAGE);\nexport const hideMessage = createAction(actionTypes.HIDE_MESSAGE);\n","import { createAction } from 'redux-actions';\n\nimport actionTypes from '../constants';\nimport apis from '../../../apis/users';\nimport { showMessage } from '../../message/actions/showHideMessageBox';\n\n// Actions\nconst fetchUsersSuccess = createAction(actionTypes.FETCH_USERS_SUCCESS);\nconst fetchUsersFailure = createAction(actionTypes.FETCH_USERS_FAILURE);\n\n/**\n * Retrieve all saved Github users from Firebase\n *\n * @param {*} dispatch\n */\nconst fetchUsers = () => {\n  const thunk = dispatch => {\n    return apis.fetchUsers()\n      .then(function(snapshot) {\n        dispatch(fetchUsersSuccess(snapshot.val()));\n      })\n      .catch(error => {\n        dispatch(fetchUsersFailure(error));\n        dispatch(showMessage('No saved users found. Please add a user via the Search Users Bar.'));\n        return error;\n      });\n  }\n\n  thunk.type = actionTypes.FETCH_USERS;\n\n  return thunk;\n}\n\nexport default fetchUsers;\n","import { createAction } from 'redux-actions';\n\nimport actionTypes from '../constants';\nimport apis from '../../../apis/users';\nimport { showMessage } from '../../message/actions/showHideMessageBox';\n\n// Actions\nconst fetchUserInfoSuccess = createAction(actionTypes.FETCH_USER_INFO);\nconst fetchUserFailure = createAction(actionTypes.FETCH_USERS_FAILURE);\n\n/**\n * Add a user to Firebase\n *\n * @param {*} {\n *     login: username,\n *     name,\n *     public_repos: publicRepos,\n *     public_gists: publicGists,\n *     followers,\n *     following,\n *     created_at: createdAt\n * }\n * @param {*} dispatch\n */\nconst addUser = ({\n    html_url: url,\n    login: username,\n    name,\n    public_repos: publicRepos,\n    public_gists: publicGists,\n    followers,\n    following,\n    created_at: createdAt\n}, dispatch) => {\n    apis.addUser({\n        url,\n        username,\n        name,\n        publicRepos,\n        publicGists,\n        followers,\n        following,\n        createdAt: new Date(createdAt).toDateString(),\n    }, (error) => {\n        if (error) {\n          // The write failed...\n          dispatch(showMessage('Error: User name could not be added to Github!'));\n        } else {\n          // Data saved successfully!\n          dispatch(showMessage(`User ${username} saved successfully!`));\n        }\n    });\n}\n\n/**\n * Fetch a Github user's public information from [https://api.github.com/users]\n *\n * @param {*} username\n * @returns\n */\nconst fetchUser = (username) => {\n    const thunk = dispatch => {\n        return apis.fetchUser(username)\n            .then(userInfo => {\n                addUser(userInfo, dispatch);\n                dispatch(fetchUserInfoSuccess(userInfo));\n                return userInfo;\n            })\n            .catch(error => {\n                dispatch(fetchUserFailure(error));\n                dispatch(showMessage(`Couldn't find any username by the name of ${username} in Github DB.`));\n                return error;\n            });\n    };\n\n    thunk.type = actionTypes.FETCH_USER_INFO;\n\n    return thunk;\n}\n\nexport default fetchUser;\n","import { createAction } from 'redux-actions';\n\nimport actionTypes from '../constants';\nimport apis from '../../../apis/users';\nimport { showMessage } from '../../message/actions/showHideMessageBox';\n\n// Actions\nconst removeUserSuccess = createAction(actionTypes.REMOVE_USER_SUCCESS);\nconst removeUserFailure = createAction(actionTypes.REMOVE_USER_FAILURE);\n\n/**\n * Retrieve all saved Github users from Firebase\n *\n * @param {*} dispatch\n */\nconst removeUser = (key) => {\n  const thunk = dispatch => {\n    return apis.removeUser(key)\n      .then(() => {\n        dispatch(removeUserSuccess({ key }));\n      })\n      .catch(error => {\n        dispatch(removeUserFailure(error));\n        dispatch(showMessage('Error: couldn\\'t remove selected user!'));\n        return error;\n      });\n  }\n\n  thunk.type = actionTypes.REMOVE_USER;\n\n  return thunk;\n}\n\nexport default removeUser;\n","import fetchUsers from './fetchUsers';\nimport fetchUser from './fetchUser';\nimport removeUser from './removeUser';\n\nexport default {\n  fetchUsers,\n  fetchUser,\n  removeUser,\n};\n","import { showMessage, hideMessage } from './showHideMessageBox';\n\nexport default {\n    showMessage,\n    hideMessage,\n};\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Header from '../../components/Header/Header'\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport UserTable from '../../components/UserTable/UserTable';\nimport MessageBar from '../../components/MessageBar/MessageBar';\nimport usersActions from '../../modules/users/actions';\nimport messageActions from '../../modules/message/actions';\n\nconst styles = (theme) => ({\n  grid: {\n    marginBottom: 10,\n    marginTop: 10,\n  },\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n});\n\nclass App extends Component {\n\n  /**\n   * LifeCycle Hook: triggers when component has been loaded\n   *\n   * @memberof App\n   */\n  componentDidMount() {\n    const { usersActions: { fetchUsers }} = this.props;\n    fetchUsers();\n  }\n\n  /**\n   * Triggers when SnackBar message window disappears\n   *\n   * @memberof App\n   */\n  handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    const { messageActions: { hideMessage } } = this.props;\n    hideMessage();\n  }\n\n  render() {\n    const { classes, message: { display, message }, users, usersActions: { fetchUser, removeUser } } = this.props;\n    const usersData = users ? users : [];\n\n    return (\n      <div className={classes.root}>\n        <Header></Header>\n        <MessageBar open={display} message={message} onClose={this.handleClose} ></MessageBar>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <Grid className={classes.grid} item xs={11}>\n            <SearchBar fetchUser={fetchUser}></SearchBar>\n          </Grid>\n          <Grid className={classes.grid} item xs={11}>\n            <UserTable users={usersData} removeUser={removeUser}></UserTable>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\n// function to convert the global state obtained from redux to local props\nconst mapStateToProps = state => ({\n  users: state.users,\n  message: state.message,\n})\n\n// function to convert redux action to pass on local props\nconst mapDispatchToProps = dispatch => ({\n  usersActions: bindActionCreators(usersActions, dispatch),\n  messageActions: bindActionCreators(messageActions, dispatch),\n})\n\n// wrapping the component within the connect HOC and calling the default function directly\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './modules/store/configureStore'\nimport App from './containers/App/App'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}